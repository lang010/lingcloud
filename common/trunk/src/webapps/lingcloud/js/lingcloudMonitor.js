/*  * @(#)lingcloudMonitor.js 2009-10-6  *   * Copyright (C) 2008-2011,  * LingCloud Team,  * Institute of Computing Technology,  * Chinese Academy of Sciences.  * P.O.Box 2704, 100190, Beijing, China.  *  * http://lingcloud.org  *   *//** * some global variables declaration *  * @type String */var monitorBasePath = "";var isFirst = 0;var monitorPartitions = null;var monitorShowPannelId = "lingcloudMonitorShowPanel";var monitorTabPannelId = "lingcloudMonitorTabPanel";var monitorPagePannelId = "lingcloudMonitorPagePanel";var loadingStr = "";var monitorInterval = 600000; // 10 minutesvar urlGraphJson = null;var monitorRefreshment = null;var isPartChanged = true;var currentPartion = 0;var cpMonitorDetail = null;/** * the jquery function, to add the tip to the virtual machine icons */$(function() {	var x = 10;	var y = 20;	$(".vmscreenshort").mouseover(function(event) {		var tooltip = "<div id='tooltip'>" + this.title + "</div>";		$("body").append(tooltip);		$("#tooltip").css( {			"top" : (event.pageY + y) + "px",			"left" : (event.pageX + x) + "px"		}).show("fast");	}).mouseout(function() {		// this.title = this.myTitle;			$("#tooltip").remove();		}).mousemove(function(e) {		$("#tooltip").css( {			"top" : (e.pageY + y) + "px",			"left" : (e.pageX + x) + "px"		});	});});function initAjax() {	var ajax = false;	try {		ajax = new ActiveXObject("Msxml2.XMLHTTP");	} catch (e) {		try {			ajax = new ActiveXObject("Microsoft.XMLHTTP");		} catch (E) {			ajax = false;		}	}	if (!ajax && typeof XMLHttpRequest != "undefined") {		ajax = new XMLHttpRequest();	}	return ajax;}/** * translate the mointor service to local name *  * @param {} *            key * @return {} */function getSrvName(key) {	var res = "";	switch (key) {	case "CPU_Load":		res = lingcloud.Monitor.service.cpu;		break;	case "Swap_Usage":		res = lingcloud.Monitor.service.swap;		break;	case "PING":		res = lingcloud.Monitor.service.ping;		break;	case "Current_Users":		res = lingcloud.Monitor.service.user;		break;	case "Disk_Usage":		res = lingcloud.Monitor.service.disk;		break;	case "Net_Traffic":		res = lingcloud.Monitor.service.net;		break;	case "Total_Processes":		res = lingcloud.Monitor.service.process;		break;	case "Zombie_Processes":		res = lingcloud.Monitor.service.zombie;		break;	case "Memory_Usage":		res = lingcloud.Monitor.service.mem;		break;	case "HTTP":		res = lingcloud.Monitor.service.http;		break;	case "SSH":		res = lingcloud.Monitor.service.ssh;		break;	case "Xend":		res = lingcloud.Monitor.service.xen;		break;	case "VECP":		res = lingcloud.Monitor.service.lingcloud;		break;	case "Mysql":		res = lingcloud.Monitor.service.mysql;		break;	case "VMList_Remote":		res = lingcloud.Monitor.service.vm;		break;	default:		res = key;	}	return res;}function showNodeList(basePath, status, partId) {	var mdata = 'proxy=getNodesByState&status=' + status; 	if(partId == null || partId == ''){			mdata += '&partId=' + -1;	}else{		mdata += '&partId=' + partId;	}	var str = '<table id="loadingTable4ShowNodeList" width="500px"><tbody><tr><td><img src="' + basePath + 'images/table_loading.gif" /></td><td>&nbsp;&nbsp;Loading Information...</td></tr></tbody></table>';    str += '<div id="nodeList" style="display:none; margin: 0px; padding: 0px; overflow:auto;width:500px;height:auto;"></div>';    jShow(str, 'Node List');	$.ajax({		url: basePath + "JSP/AjaxMonitorProxy.jsp",		type: 'GET',		dataType: 'text',		data: mdata,		error: function(XMLHttpRequest, textStatus, errorThrown){		     alert(lingcloud.error.responseNotFound + textStatus);		},		success: function(data, textStatus, XMLHttpRequest){						//alert(data);			var result = eval('(' + data + ')');			var hosts = result.HostInfors;			var s = '';			if(hosts == null || hosts.length == 0){				s = lingcloud.error.noResult;			}else{				var str2 = '<table border="0" cellspacing=1 width="100%"><tbody>';							//the header of the table							str2 += '<tr class="actionlog_title">' + 							'<th width="30px">' + lingcloud.Monitor.monitorDetail.tHost + '</th>' + 			 							 				'<th width="30px">' + lingcloud.Monitor.monitorDetail.tStat + '</th>' + 			 				'<th width="150px">' + lingcloud.Monitor.monitorDetail.tCheck + '</th>' +			 				'<th >' + lingcloud.Monitor.monitorDetail.tInfor +  '</th>' +			 				'</tr>';				 							                for(var i = 0; i< hosts.length; i++){			                				                	var hostInfo = result.HostInfors[i];			                	//alert(hostInfo.hostName);			                	if (hostInfo == null)			                		break;			                				                					                				                	if(i % 2 == 1){			                		str2 += '<tr class= "vmi_tr_odd">';			                	}else{			                		str2 += '<tr class= "vmi_tr_even">';			                	}			                	str2 += '<td>' + hostInfo.hostName + '</td>';			                						                	str2 += statusCheck(hostInfo.srvState);		                							                						                str2 += '<td align="center">' + hostInfo.srvCheckTime + '</td>';				                str2 += '<td>' + hostInfo.srvStatInfor + '</td>';				                str2 += '</tr>';	                			                				                				                }														str2 += '</tbody></table>';								s = str2;			}			var loadt = document.getElementById('loadingTable4ShowNodeList');			var nodeList = document.getElementById('nodeList');			if(loadt == null || nodeList == null)				return;			nodeList.innerHTML = s;			loadt.style.display = 'none';			nodeList.style.display = '';		}	});}/** * show the statistics of each partition, including the number of machine with * certain status(OK, WARNING, CRITICAL) *  * @param {} *            basePath */function showStatisticsMonitorPanel(basePath) {	monitorBasePath = basePath;	isFirst++;	var str = "<table><tbody><tr><td><img src="			+ basePath			+ "images/table_loading.gif /></td><td>&nbsp;&nbsp;Loading Information...</td></tr></tbody></table>";	if (document.getElementById(monitorShowPannelId) == null)		return;	document.getElementById(monitorShowPannelId).innerHTML = str;	var ajax = initAjax();	var url = basePath + "JSP/AjaxMonitorProxy.jsp?proxy=statistics";	if (ajax === false || url === null) {		return false;	}	var refreshInteval = monitorInterval;	ajax.open("GET", url, true);	ajax.onreadystatechange = function() {		if (ajax.readyState == 4) {			if (ajax.status == 200) {				var xmlDoc = ajax.responseText;				if (xmlDoc === null || xmlDoc == "") {					document.getElementById(monitorShowPannelId).innerHTML = lingcloud.Monitor.errors.noRes;					return;				}				var result = eval('(' + xmlDoc + ')');				if (result.partitionNum == 0) {					document.getElementById(monitorShowPannelId).innerHTML = lingcloud.Monitor.errors.noRes;					return;				}				refreshInteval = result.flushHz				var len = result.partitionNum;				var prefixchartid = "monitor_statistics_chart";				var nameArray = [];				var srvName = [];				var okArray = [];				var warningArray = [];				var criticalArray = [];				var str = '<div id= "monitor_statistics">';				// to make some change here				var totalPnn = 0, totalPn_health = 0, totalPn_warning = 0, totalPn_critical = 0;				for ( var i = 0; i < len; i++) {					var pt = result.partitions[i];					var pcNode = pt['phyNode'];					totalPn_health += pcNode[0];					totalPn_warning += pcNode[1];					totalPn_critical += pcNode[2];				}				totalPnn = totalPn_health + totalPn_warning + totalPn_critical;				str += '<span class="monitor_total">'						+ lingcloud.Monitor.monitorSummary.sumInfor.total						+ '&nbsp;&nbsp;'						+ len						+ '&nbsp;&nbsp;'						+ lingcloud.Monitor.monitorSummary.sumInfor.parNode						+ '&nbsp;&nbsp;'						+ totalPnn						+ '&nbsp;&nbsp;'						+ lingcloud.Monitor.monitorSummary.sumInfor.hostNode						+ '<br/><br/>'						+ '<a href="javascript:void(0)" onclick="showNodeList(\''						+ basePath						+ '\', \'OK\')">'						+ lingcloud.Monitor.status.ok						+ ':&nbsp;'						+ totalPn_health						+ ','						+ '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="showNodeList(\''						+ basePath						+ '\', \'WARNING\')">'						+ lingcloud.Monitor.status.warn						+ ':&nbsp;'						+ totalPn_warning						+ ','						+ '&nbsp;&nbsp;<a href="javascript:void(0)" onclick="showNodeList(\''						+ basePath + '\', \'CRITICALUNKNOWN\')">' + lingcloud.Monitor.status.crit						+ ':&nbsp;' + totalPn_critical + '</a></span>'				str += '<ul>';				for ( var i = 0; i < len; i++) {					// alert("i=" + i);					// to get the info of each partition					var pt = result.partitions[i];					// the interface					str += '<li>';					str += '<div id="monitor_part_desc">';					str += '<span><strong>' + pt.partitionName + '</strong></span>';					str += '<span style="margin-left: 30px;">' + lingcloud.Monitor.monitorSummary.sumInfor.parHealth + ':&nbsp;';					var score = pt.healthScore;					var b = 1.0 * score / 20;					var c = b % 1, bb = b;					b -= c;					if (c > 0.5)						b += 1;					var hsi = 0;					for (hsi = 0; hsi < b; hsi++) {						str += '<img alt = "score1" src="' + basePath + 'images/score1.png" />';					}					for (; hsi < 5; hsi++) {						str += '<img alt = "score0" src="' + basePath + 'images/score0.png" />';					}					str += '</span><span style="margin-left: 10px;">' + bb							.toFixed(2) + ' </span><br/>';					var pcNode = pt['phyNode'];					str += lingcloud.Monitor.monitorSummary.sumInfor.hostNum							+ ':&nbsp;' + (pcNode[0] + pcNode[1] + pcNode[2])							+ '&nbsp;,&nbsp;';					str += lingcloud.Monitor.status.ok + ':&nbsp;' + pcNode[0]							+ '&nbsp;,&nbsp;' + lingcloud.Monitor.status.warn							+ ':&nbsp;' + pcNode[1] + '&nbsp;,&nbsp;'							+ lingcloud.Monitor.status.crit + ':&nbsp;'							+ pcNode[2];					str += '<br/>';					str += '</div>';					str += '<div id ="' + prefixchartid + i							+ '", class= "monitor_chart"></div>';					str += '<hr>';					str += '</li>';					// the data for the chart					var namearr = [];					var srvname = [];					var okarr = [];					var warningarr = [];					var criticalarr = [];					var c = 0;					for ( var key in pt) {						if (key == "phyNode") {							continue;						}						if (typeof (pt[key]) == 'object') {							// alert(key);							namearr.push(getSrvName(key));							srvname.push(key);							okarr.push(pt[key][0]);							warningarr.push(pt[key][1]);							criticalarr.push(pt[key][2]);							c++;						}					}					if (c < 1) {						namearr.push("");						okarr.push(0);						warningarr.push(0);						criticalarr.push(0);					}					nameArray.push(namearr);					srvName.push(srvname);					okArray.push(okarr);					warningArray.push(warningarr);					criticalArray.push(criticalarr);				}				str += '</ul></div>';				document.getElementById(monitorShowPannelId).innerHTML = str;				// to get the char via jqplot				getChart4monitor(prefixchartid, len, nameArray, okArray,						warningArray, criticalArray, srvName);				if (isFirst == 1) {					monitorInterval = refreshInteval;					monitorRefreshment = setInterval(							"showStatisticsMonitorPanel('" + monitorBasePath									+ "')", monitorInterval);					$.jqplot.eventListenerHooks.push( [ 'jqplotMouseMove',							myMove ]);				} else if (monitorInterval != refreshInteval) {					monitorInterval = refreshInteval;					clearInterval(monitorRefreshment);					monitorRefreshment = setInterval(							"showStatisticsMonitorPanel('" + basePath + "')",							monitorInterval);				}			} else {				alert(lingcloud.error.responseNotFound + ajax.statusText);			}		}	};	ajax.send(null);}/** * to draw the chart for each partition *  * @param {} *            prefixchartid * @param {} *            len * @param {} *            nameArray * @param {} *            okArray * @param {} *            warningArray * @param {} *            criticalArray */function getChart4monitor(prefixchartid, len, nameArray, okArray, warningArray,		criticalArray, srvName) {		for ( var i = 0; i < len; i++) {		var namearry = nameArray[i];		var okdata = okArray[i];		var warningdata = warningArray[i];		var criticaldata = criticalArray[i];		var pre = i;		var plot = $.jqplot('' + prefixchartid + i, [ okdata, warningdata,				criticaldata ], {			stackSeries: true,			seriesDefaults : {				renderer : $.jqplot.BarRenderer,				rendererOptions : {				// barPadding:4,				 barMargin:45				},				pointLabels : {					show : true				}			},			series : [ {				label : lingcloud.Monitor.status.ok			}, {				label : lingcloud.Monitor.status.warn			}, {				label : lingcloud.Monitor.status.crit,				color : 'red'			} ],			legend : {				show : true,				placement : 'outside',				location : 'ne'			},			axesDefaults : {				tickRenderer : $.jqplot.CanvasAxisTickRenderer,				tickOptions : {					enableFontSupport : true,					labelPosition : 'middle',					fontFamily : 'Tahoma, Arial, "Courier New", serif',					fontSize : '10pt',					angle : -30				}			},			axes : {				xaxis : {					renderer : $.jqplot.CategoryAxisRenderer,					ticks : namearry				// tickOptions:{mark:'', fontSize:10, fontColor:'green'}				},				yaxis : {					min : 0,					padMin: 0,					// max: 30,					// numberTicks:5,					tickOptions : {						mark : '',						formatString : '%d'					}				}			}		});		var ctid = '#' + prefixchartid + i;		$(ctid)				.append(						'<div id="monitor_statistics_tooltip_' + i + '" style="position:absolute;display:none;background:#E5DACA;padding:4px;"></div>');		plot._msnamearray = namearry;		$(ctid).bind('jqplotDataClick',				function(ev, seriesIndex, pointIndex, data) {					// alert(ev + 'series: '+seriesIndex+', point:					// '+pointIndex+', data: '+ data);				var parIndex = parseInt(this.id[this.id.length - 1]);				showPartitionItemStatics(parIndex,						srvName[parIndex][pointIndex], seriesIndex);			});	}}/** * to show the next tab hidden in the right side. */function nextTab(cssName) {	var csssel = 'ul.' + cssName + ' li';	// find the visible tabs	var $visibleElem = $('ul li:visible');	// to hidden the first visible tab in the left	var $fc = $(csssel + ':visible:first');// $visibleElem.eq(0);	$fc.css("display", "none");	// $fc.next().trigger("click");	// to show the next tab hidden in the right side	var $lc = $(csssel + ':visible:last');// $visibleElem.eq(0);	var $nextlc = $lc.next();	var $nnextlc = $nextlc.next();	// alert(($lc.css("display")));	// alert(typeof($nnextlc.css("display")));	// alert(typeof($nnextlc.css("display")) == 'undefined');	if (typeof ($nextlc.css("display")) != 'undefined'			&& $nextlc.css("display") == 'none') {		$nextlc.css("display", "inline");	}	// to show the prev buttion	if ($(".prevtab").css("display") == "none")		$(".prevtab").css("display", "inline");	// deside whether to hidden the next button	if (typeof ($nnextlc.css("display")) == 'undefined') {		$(".nexttab").css("display", "none");	}	return false;}/** * to show the previous tab hidden in the left side */function prevTab(cssName) {	var csssel = 'ul.' + cssName + ' li';	// find the visible tabs	var $visibleElem = $('ul li:visible');	// to hidden the last visible tab in the right	var $lc = $(csssel + ':visible:last');// $visibleElem.eq(0);	$lc.css("display", "none");	// to show the previous tab hidden in the left side	var $fc = $(csssel + ':visible:first');// $visibleElem.eq(0);	var $prevfc = $fc.prev();	var $pprevfc = $prevfc.prev();	if (typeof ($prevfc.css("display")) != 'undefined'			&& $prevfc.css("display") == 'none') {		$prevfc.css("display", "inline");	}	// to show the next buttion	if ($(".nexttab").css("display") == "none")		$(".nexttab").css("display", "inline");	// deside whether to hidden the prev button	if (typeof ($pprevfc.css("display")) == 'undefined') {		$(".prevtab").css("display", "none");	}	return false;}/** * show the patition info in detail, each partition is embedded in one tab *  * @param {} *            basePath */function showTab4Patition(basePath) {	// 1 waiting...	loadingStr = "<table><tbody><tr><td><img src="			+ basePath			+ "images/table_loading.gif /></td><td>&nbsp;&nbsp;Loading Information...</td></tr></tbody></table>";	if (document.getElementById(monitorShowPannelId) == null)		return;	$('#' + monitorShowPannelId).html(loadingStr);	var partitionData = null;	if (monitorPartitions == null || monitorPartitions.length == 0) {		$.ajax( {			url : basePath + "JSP/AjaxMonitorProxy.jsp",			type : 'GET',			dataType : 'text',			data : "proxy=showTab4Patition",			error : function(MLHttpRequest, textStatus, errorThrown) {				alert(lingcloud.error.responseNotFound + textStatus);			},			success : function(data, textStatus, XMLHttpRequest) {				// alert(textStatus);			var result = eval('(' + data + ')');			// alert(result.datas.length);			partitionData = result.datas;			monitorPartitions = partitionData;			showTabs(basePath, partitionData);		}		});	} else {		partitionData = monitorPartitions;		showTabs(basePath, partitionData);	}}/** * show the multipleTabs, it can be automatically hidden and shown *  * @param {} *            basePath * @param {} *            partitionData */function showTabs(basePath, partitionData) {	var ulCssName = 'tabpanel';	var innerMonitorPartShowId = 'monitor_part_show';	var pageDivisionId = 'page_division';	if (partitionData.length == 0) {		$('#' + monitorShowPannelId).html(lingcloud.Monitor.errors.noRes);		return;	}	var str = '<table border="0" width= "900px"><tr>';	str += '<td width="15px"><div class="prevtab" onclick="prevTab(\'' + ulCssName + '\');">&lt&lt&nbsp</div></td>';	str += '<td width="880px">';	str += '<div id="nav_monitor_part">' + '<ul class= "' + ulCssName + '">';	for ( var i = 0; i < partitionData.length; i++) {		str += '<li>' + '<a>' + partitionData[i].PartionName + '</a>' + '</li>';	}	str += '</ul></div>';	str += '</td>';	str += '<td width="15px"><div class="nexttab" onclick="nextTab(\'' + ulCssName + '\');">&nbsp&gt&gt</div></td>';	str += '</tr>';	str += '<tr><td></td><td>' + '<div id ="' + innerMonitorPartShowId			+ '"></div>' + '</td><td></td></tr>';	str += '<tr><td></td><td>' + '<div id ="' + pageDivisionId + '"></div>'			+ '</td><td></td></tr>';	str += '</table>';	$('#' + monitorShowPannelId).html(str);	showDefaultPartition(basePath, ulCssName, 0, innerMonitorPartShowId,			pageDivisionId);}/** * show the default partition detailed infomation, the first partition by * default, and add the handler function of click event of each tab(partition) * to do the page-division, do it. *  * @param {} *            basePath * @param {} *            cssName * @param {} *            partitionId */function showDefaultPartition(basePath, cssName, partitionId,		innerMonitorPartShowId, pageDivisionId) {	// 3 get all the partion info with the id of partitionID, insert the content	// into the div with id monitor_part_show	$(function() {		// alert('in step 3');		var csssel = 'ul.' + cssName + ' li';		var $div_li = $(csssel); // $("#nav_monitor_part ul li");		var i = 0, j = 0;		// TODO the defaultWidth		var defaultWidth = 870, totalWidth = 0;		var needHidden = false;		for (i = 0; i < $div_li.length; i++) {			totalWidth += $div_li.eq(i).width();			if (totalWidth > defaultWidth) {				j = i - 1;				needHidden = true;				break;			}		}		if (needHidden) {			$(csssel + ':gt(' + (j - 1) + ')').css("display", "none");			$(".nexttab").css("display", "inline");		}		$div_li.click(function() {			$(this).addClass("current").siblings().removeClass("current");			var index = $div_li.index(this);			// the index is just the pariionId				isPartChanged = true;				pageDivisionTool(basePath, innerMonitorPartShowId,						pageDivisionId, index, 1);			})// $div_li.click		var $li = $(csssel + ":eq(" + partitionId + ")");		$li.trigger("click");	})}/** * show page division for monitor details *  * @param {} *            basePath * @param {} *            innerMonitorPartShowId * @param {} *            pageDivisionId * @param {} *            partIndex * @param {} *            currentPage */function pageDivisionTool(basePath, innerMonitorPartShowId, pageDivisionId,		partIndex, currentPage) {	if (document.getElementById(innerMonitorPartShowId) == null)		return;	cpMonitorDetail = partIndex;	$('#' + innerMonitorPartShowId).html(loadingStr);	$			.ajax( {				url : basePath + "JSP/AjaxMonitorProxy.jsp",				type : 'GET',				dataType : 'text',				data : "proxy=getHostsInPartition&parId=" + partIndex + '&cp='						+ currentPage,				error : function(MLHttpRequest, textStatus, errorThrown) {					alert(lingcloud.error.responseNotFound + textStatus);				},				success : function(data, textStatus, XMLHttpRequest) {					// alert(textStatus);					if (data == null || data == '') {						$('#' + innerMonitorPartShowId).html(								lingcloud.Monitor.errors.noRes);						return;					}					var result = eval('(' + data + ')');					var len = result.phyNodeTotalNum					// alert(len);					if (len == 0) {						$('#' + innerMonitorPartShowId).html(								lingcloud.Monitor.errors.noRes);						return;					}					var str2 = '<table border="0" cellspacing=1 width="100%">' + '<tbody><tr><td colspan="5" height="1px"></td></tr>';					// the header of the table					str2 += '<tr class="actionlog_title">'							+ '<th width="30px">'							+ lingcloud.Monitor.monitorDetail.tHost + '</th>'							+ '<th width="120px">'							+ lingcloud.Monitor.monitorDetail.tSrv + '</th>'							+ '<th width="30px">'							+ lingcloud.Monitor.monitorDetail.tStat + '</th>'							+ '<th width="150px">'							+ lingcloud.Monitor.monitorDetail.tCheck + '</th>'							+ '<th >' + lingcloud.Monitor.monitorDetail.tInfor							+ '</th>' + '</tr>';					for ( var i = 0; i < len; i++) {						// alert("hi");						var hostInfo = result.phyNodes[i];						// alert(hostInfo.hostName);						if (hostInfo == null)							continue;						var monitorInfo = hostInfo.monitorInfors;						var monitorInfoLen = monitorInfo.length;						// alert("the monitor items len of " + hostInfo.hostName						// + " is " + monitorInfoLen);						if (monitorInfoLen == 0) {							str2 += '<tr class= "vmi_tr_even" valign= "top">';							str2 += '<td><img src="' + basePath + 'images/'									+ hostInfo.hostPic + '" align="center" />'									+ hostInfo.hostName + '</td>';							var vm = hostInfo.VMList;							str2 += '<td style = "cursor:pointer" onClick="showMonitorItemGraphList(\''								+ hostInfo.hostName								+ '\', \''								+ hostInfo.vmSrvName								+ '\', \''								+ basePath								+ '\', 0)">' 								+ '<img width="16" height="16" style="border: medium none ;" src="http://172.22.1.13:8080/lingcloud/images/list.png">&nbsp;&nbsp;'								+ lingcloud.Monitor.service.vm + '</td>';							str2 += statusCheck(hostInfo.vmStatus);							str2 += '<td align="center">' + hostInfo.vmCheckTime + '</td>';							str2 += '<td>' + vmDataEmbedStr(basePath, vm,									hostInfo.hostName) + '</td>';							str2 += '</tr>';						} else {							str2 += '<tr class= "vmi_tr_even" valign="top">';							str2 += '<td rowspan ="' + (monitorInfoLen + 1)									+ '"><img src="' + basePath + 'images/'									+ hostInfo.hostPic + '" align="center" />'									+ hostInfo.hostName + '</td>';							str2 += '<td style = "cursor:pointer" onClick="showMonitorItemGraphList(\''									+ hostInfo.hostName									+ '\', \''									+ monitorInfo[0].srvName									+ '\', \''									+ basePath									+ '\', 0)">'									+ '<img width="16" height="16" style="border: medium none ;" src="http://172.22.1.13:8080/lingcloud/images/list.png">&nbsp;&nbsp;'									+ getSrvName(monitorInfo[0].srvName)									+ '</td>';							str2 += statusCheck(monitorInfo[0].srvState);							str2 += '<td align="center">' + monitorInfo[0].srvCheckTime + '</td>';							str2 += '<td>' + monitorInfo[0].srvStatInfor + '</td>';							str2 += '</tr>';							for ( var j = 1; j < monitorInfoLen; j++) {								if (j % 2 == 1) {									str2 += '<tr class= "vmi_tr_odd">';								} else {									str2 += '<tr class= "vmi_tr_even">';								}								str2 += '<td style = "cursor:pointer" onClick="showMonitorItemGraphList(\''										+ hostInfo.hostName										+ '\', \''										+ monitorInfo[j].srvName										+ '\', \''										+ basePath										+ '\', 0)">'										+ '<img width="16" height="16" style="border: medium none ;" src="http://172.22.1.13:8080/lingcloud/images/list.png">&nbsp;&nbsp;'										+ getSrvName(monitorInfo[j].srvName)										+ '</td>';								str2 += statusCheck(monitorInfo[j].srvState);								str2 += '<td align="center">' + monitorInfo[j].srvCheckTime + '</td>';								str2 += '<td>' + monitorInfo[j].srvStatInfor + '</td>';								str2 += '</tr>';							}							if (monitorInfoLen % 2 == 1) {								str2 += '<tr class= "vmi_tr_odd">';							} else {								str2 += '<tr class= "vmi_tr_even">';							}							// to add one row for the virtual machine							var vm = hostInfo.VMList;							str2 += '<td style = "cursor:pointer" onClick="showMonitorItemGraphList(\''								+ hostInfo.hostName								+ '\', \''								+ hostInfo.vmSrvName								+ '\', \''								+ basePath								+ '\', 0)">' 								+ '<img width="16" height="16" style="border: medium none ;" src="http://172.22.1.13:8080/lingcloud/images/list.png">&nbsp;&nbsp;'								+ lingcloud.Monitor.service.vm + '</td>';							str2 += statusCheck(hostInfo.vmStatus);							str2 += '<td align="center">' + hostInfo.vmCheckTime + '</td>';							str2 += '<td>' + vmDataEmbedStr(basePath, vm,									hostInfo.hostName) + '</td>';							str2 += '</tr>';						}						str2 += '<tr><td colspan="5" height="1px"><hr></td></tr>';					}					str2 += '</tbody></table>';					$('#' + innerMonitorPartShowId).html(str2);					// to do the page division					if (result.totalPage && isPartChanged) {						isPartChanged = false;						if (result.totalPage <= 1) {							$('#' + pageDivisionId).html('');						} else {							var totalPage = result.totalPage;							var cp = result.currPage;							var pd1 = new LingcloudPageDiv( {								totalPage : totalPage,								currentPage : cp,								renderId : pageDivisionId,								callback : function(pid) {									// whichPage(basePath, pid);									pageDivisionTool(basePath,											innerMonitorPartShowId,											pageDivisionId, partIndex, pid);								}							});						}					}				}// success			}); // $.ajax}/** * to check the status of each monitor_item, and change it style according to * its value *  * @param {} *            status * @return {} */function statusCheck(status) {	var temp = "";	if (status == lingcloud.Monitor.status.ok || status == 'OK') {		temp = '<td class= "monitor_item_ok">' + lingcloud.Monitor.status.ok + '</td>';	} else if (status == lingcloud.Monitor.status.warn || status == 'WARNING') {		temp = '<td class= "monitor_item_warning">' + lingcloud.Monitor.status.warn + '</td>';	} else {// if(status == 'CRITICAL' || 'UNKNOWN')		temp = '<td class= "monitor_item_critical">' + lingcloud.Monitor.status.crit + '</td>';	}	return temp;}/** * to embed the virtual machine in one physical node *  * @param {} *            basePath * @param {} *            vm * @return {} */function vmDataEmbedStr(basePath, vm, hostName) {	var len = vm.length;	var numPerRow = 5;	var id2 = '<table border="0" cellspacing=1 width="100%">' + '<tbody>';	if (vm.length == 0) {		id2 += '<tr><td colspan = "' + numPerRow + '">'				+ lingcloud.Monitor.errors.noVm + '</td></tr>';	} else {		var rows = len / numPerRow;		var index = 0;		var ma = (len == 1) ? 'machine' : 'machines';		id2 += '<tr><td colspan = "' + numPerRow + '">' + len + ' virtual '				+ ma + ' on node:</td></tr>';		for ( var r = 0; r <= rows; r++) {			id2 += '<tr>';			for ( var co = 0; co < numPerRow && index < len; co++) {				id2 += '<td>';				id2 += '<a href="javascript:getVMMonitorItems(\'' + hostName						+ '\', \'' + vm[index].VMName + '\', \'' + basePath						+ '\');" ><img class = "vmscreenshort" src="'						+ basePath + 'images/' + vm[index].VMPic						+ '" align="center" title= "' + vm[index].VMName						+ '"/></a>';				id2 += '</td>';				index++;			}			id2 += '</tr>';		}	}	id2 += '</tbody></table>';	return id2;}function checkVMStatus(s) {	if (s.indexOf('r') >= 0)		return lingcloud.Monitor.vmInfor.status.r;	if (s.indexOf('b') >= 0)		return lingcloud.Monitor.vmInfor.status.b;	if (s.indexOf('d') >= 0)		return lingcloud.Monitor.vmInfor.status.d;	if (s.indexOf('p') >= 0)		return lingcloud.Monitor.vmInfor.status.p;	if (s.indexOf('s') >= 0)		return lingcloud.Monitor.vmInfor.status.s;	if (s.indexOf('c') >= 0)		return lingcloud.Monitor.vmInfor.status.c;	return lingcloud.Monitor.vmInfor.status.u;}/** * get all monitored items of one machine(physical or virtual node) *  * @param {} *            hostName * @param {} *            basePath */function getVMMonitorItems(hostName, vmName, basePath) {	// TODO to get the the monitor information of virtual machines	if (hostName == null || hostName == "") {		alert(lingcloud.Monitor.errors.hostNameNotValid);		return;	}	var str = '<div id="srvGraphItem" ></div>';	str = "<table id='loading4VM' width='800px'> <tbody><tr><td><img src="			+ basePath			+ "images/table_loading.gif /></td><td>&nbsp;&nbsp;Loading Information...</td></tr></tbody></table>";	str += '<table id= "vmifot" border="0" cellspacing=0 width="100%"></table>';	jShow(str, lingcloud.Monitor.vmInfor.vmInfor + ' : ' + vmName);	var ajax = initAjax();	var url = basePath + "JSP/AjaxMonitorProxy.jsp?proxyNum=2&hostName="			+ hostName + "&vmName=" + vmName + "&cp=" + cpMonitorDetail;	if (ajax === false || url === null) {		return false;	}	var lt = document.getElementById('loading4VM');	var it = document.getElementById('vmifot');	ajax.open("GET", url, true);	ajax.onreadystatechange = function() {		if (ajax.readyState == 4) {			if (ajax.status == 200) {				var xmlDoc = ajax.responseText;				var id2 = '<tbody>';				id2 += '<tr><td colspan = "4"><b>'						+ lingcloud.Monitor.vmInfor.vmTittle + ' -- ' + vmName;				if (xmlDoc == null || xmlDoc.trim() == '') {					id2 += '</b></td></tr><hr><br>';					id2 += '<tr><td colspan "4">' + lingcloud.Monitor.errors.noRes + '</td></tr>';					id2 += '</tbody>';					if (lt)						lt.style.display = 'none';					if (it)						it.innerHTML = id2;					return;				}				// alert(xmlDoc);				var result = eval('(' + xmlDoc + ')');				var data = result;				var len = data.length;				if (len == 0) {					id2 += '</b></td></tr><hr><br>';					id2 += '<tr><td colspan "4">' + lingcloud.Monitor.errors.noRes + '</td></tr>';					id2 += '</tbody>';					if (lt)						lt.style.display = 'none';					if (it)						it.innerHTML = id2;					return;				}				id2 += '</b>';				id2 += '&nbsp;&nbsp;<img class = "vmscreenshort" src="'						+ basePath + 'images/' + data.hostPic						+ '" align="center" title= "' + data.hostPic						+ '"/></td>';				id2 += '</tr><tr><hr><br width="100%"></tr>';				id2 += '<tr class = "class="actionlog_title"" align = "left">';				id2 += '<th width="180px">' + lingcloud.Monitor.vmInfor.vmInfor + '</th>';				id2 += '<th width="180px">' + lingcloud.Monitor.vmInfor.vmCpu + '</th>';				id2 += '<th width="180px">' + lingcloud.Monitor.vmInfor.vmMem + '</th>';				id2 += '<th width="180px">' + lingcloud.Monitor.vmInfor.vmDisk + '</th>';				id2 += '<th width="150px">' + lingcloud.Monitor.vmInfor.vmNet + '</th><br>';				id2 += '</tr><br>';				id2 += '<tr class = "vmi_tr_even" align = "left">';				id2 += '<td>' + '<b>' + lingcloud.Monitor.vmInfor.infor.vmName						+ ':\t</b>' + data.vmName + '<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.infor.hostName + ':\t</b>'						+ data.hostName + '<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.infor.status + ':\t</b>'						+ checkVMStatus(data.status) + '<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.infor.chkTime						+ ':\t</b><br>' + data.chkTime + '<br>' + '</td>';				id2 += '<td>' + '<b>' + lingcloud.Monitor.vmInfor.cpu.vcpu						+ ':\t</b>' + data.cpu.vcpus + '<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.cpu.time + ':\t</b>'						+ data.cpu.time + '&nbsp;s<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.cpu.uptime + ':\t</b>'						+ data.add.cpu.uptime + '&nbsp;s<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.cpu.usage + ':\t</b>'						+ data.cpu.usage + '&nbsp;%<br>' + '</td>';				id2 += '<td>' + '<b>' + lingcloud.Monitor.vmInfor.mem.mem						+ ':\t</b>' + data.mem.mem + '&nbsp;k<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.mem.usage + ':\t</b>'						+ data.mem.usage + '&nbsp;%<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.mem.max + ':\t</b>'						+ data.mem.max + '&nbsp;k<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.mem.maxPer + ':\t</b>'						+ data.mem.maxPer + '&nbsp;%<br>' + '</td>';				id2 += '<td>';				// + '<b>' + lingcloud.Monitor.vmInfor.disk.usage + ':\t</b>' +				// data.disk.usage + '&nbsp;GB<br>'				// + '<b>' + lingcloud.Monitor.vmInfor.disk.max + ':\t</b>' +				// data.disk.max + '&nbsp;GB<br>'				for (i = 0; i < data.add.disk.dirs.length; i++) {					id2 += '<b>' + lingcloud.Monitor.vmInfor.disk.size							+ ':\t</b>' + data.add.disk.sizes[i] + '<br>'							+ '<b>' + lingcloud.Monitor.vmInfor.disk.dir							+ ':</b><br>' + data.add.disk.dirs[i] + '<br>';				}				if (data.add.disk.dirs.length == 0) {					id2 += '<b>' + lingcloud.Monitor.errors.noRes + '\t</b>';				}				id2 += '</td>';				id2 += '<td>' + '<b>' + lingcloud.Monitor.vmInfor.net.nets						+ ':\t</b>' + data.net.nets + '<br>';				if (data.net.ip != null && data.net.ip != "null")					id2 += '<b>' + lingcloud.Monitor.vmInfor.net.ip + ':\t</b>'							+ data.net.ip + '<br>';				id2 += '<b>' + lingcloud.Monitor.vmInfor.net.tx + ':\t</b>'						+ data.add.net.tx + '&nbsp;k<br>' + '<b>'						+ lingcloud.Monitor.vmInfor.net.sx + ':\t</b>'						+ data.add.net.rx + '&nbsp;k<br>' + '</td>';				id2 += '</tr><br><br>';				id2 += '</tbody>';				//				if (lt)					lt.style.display = 'none';				if (it)					it.innerHTML = id2;			} else {				if (lt)					lt.style.display = 'none';				if (it)					it.innerHTML = lingcloud.error.responseNotFound							+ ajax.statusText;			}		}	};	ajax.send(null);}/** * show the monitor data of one certain monitor item, such as CPU_LOAD, the * result is a list of graphs, each one represents a time period pos: 0 - * direct, 1 - embed *  * @param {} *            hostName * @param {} *            itemName * @param {} *            basePath * @param {} *            pos */function showMonitorItemGraphList(hostName, itemName, basePath, pos, cp) {	if (hostName == null || hostName == "") {		alert(lingcloud.Monitor.errors.hostNameNotValid);		return;	}	if (itemName == null || itemName == "") {		alert(lingcloud.Monitor.errors.itemNameNotValid);		return;	}	var ajax = initAjax();	var url = basePath + "JSP/AjaxMonitorProxy.jsp?proxy=getSrvHistoryImg&host="			+ hostName + "&srv=" + encodeURIComponent(itemName);	if (cp != null) {		url += "&cp=" + cpMonitorDetail;	}	if (ajax === false || url === null) {		return false;	}	ajax.open("GET", encodeURI(url), true);	ajax.onreadystatechange = function() {		if (ajax.readyState == 4) {			if (ajax.status == 200) {				var xmlDoc = ajax.responseText;				if (xmlDoc === null || xmlDoc == "") {					return;				}				var result = eval('(' + xmlDoc + ')');				urlGraphJson = result;				var str = "";				if ( result == false 						|| result == "" 						|| result == null) {					str = lingcloud.error.noResult;				}else					str += getSelectGraphSection(basePath, result, pos);				if (pos == 1) {					document.getElementById('srvGraphItem').innerHTML = str;				} else if (pos == 0) {					jShow(str, hostName + " : " + getSrvName(itemName));				}			} else {				alert(lingcloud.error.responseNotFound + ajax.statusText);			}		}	};	ajax.send(null);}/** * show the chart of one monitor item, each result is choosen by the time period *  * @param {} *            result * @param {} *            closeFlag * @return {} */function getSelectGraphSection(basePath, result, pos) {	var str = "";	var len = result.Infors.length;	if (len <= 0)		return lingcloud.Monitor.errors.noRes;	str += '<table border ="0"><tr><td>' 			+ lingcloud.Monitor.monitorSummary.selectTime 			+ ': <select id="selectTime" onchange="return onSelectTimeSelected(\''			+ basePath			+'\');">';	for ( var i = 0; i < len; i++) {		str += '<option value ="' + result.Infors[i].Item + '">'				+ result.Infors[i].Item + '</option>';	}	str += '</select></td>';	if (pos != 0) {		str += '<td align ="right"><span style="margin-left:390px"><img src ="' 			+ basePath 			+ 'images/close.png" style="cursor:pointer" onclick="document.getElementById(\'srvGraphItem\').innerHTML = \'\';"></img></span></td>';	}	str += '</tr></table>';	str += '<div id=\"hostMonitorTable_item\" align ="middle" style=\"width:100%;height:auto;overflow:auto;\">'			+ makeIframe(basePath, result.Infors[0].url) + '</div>';	return str;}function onSelectTimeSelected(basePath) {	document.getElementById('hostMonitorTable_item').innerHTML = makeIframe(basePath, urlGraphJson.Infors[document			.getElementById("selectTime").selectedIndex].url);}/** * to make the iframe url for the monitor item graph *  * @param {} *            imgUrl * @return {} */function makeIframe(basePath, imgUrl) {	var res = "<iframe id=\"frame_content\" align=\"middle\" src=\""			+ basePath			+ imgUrl			+ "\" scrolling=\"no\" frameborder=\"0\" width=\"500px\" height=\"200px\"></iframe>";	return res;}function isResStatus(status, series) {	if (status == null || series == null)		return false;	if (series == 0) {		if (status == lingcloud.Monitor.status.ok || status == 'OK')			return true;	} else if (series == 1) {		if (status == lingcloud.Monitor.status.warn || status == 'WARNING')			return true;	} else if (series == 2) {		if (status == lingcloud.Monitor.status.crit || status == 'CRITICAL'				|| status == lingcloud.Monitor.status.unkw				|| status == 'UNKNOWN')			return true;	}	return false;}/** * to show the overview of the monitor information -- the statistics *  * @param {} *            parID * @param {} *            item */function showPartitionItemStatics(parID, item, seriesIndex) {	var basePath = monitorBasePath;	var str = "<table><tbody><tr><td><img src="			+ basePath			+ "images/table_loading.gif /></td><td>&nbsp;&nbsp;Loading Information...</td></tr></tbody></table>";	if (document.getElementById(monitorShowPannelId) == null)		return;	var ajax = initAjax();	// cross domain access. source=2 means the load5 data.	var url = basePath + "JSP/AjaxMonitorProxy.jsp?proxy=getHost4srv&parId=" + parID			+ "&name=" + item;	if (ajax === false || url === null) {		return false;	}	ajax.open("GET", encodeURI(url), true);	ajax.onreadystatechange = function() {		if (ajax.readyState == 4) {			if (ajax.status == 200) {				var xmlDoc = ajax.responseText;				if (xmlDoc === null || xmlDoc == "") {					document.getElementById(monitorShowPannelId).innerHTML = lingcloud.Monitor.errors.noRes;					return;				}				// alert(xmlDoc);				var result = eval('(' + xmlDoc + ')');				var a = result.partitionName;				var len = result.hostNum;				if (len == 0) {					document.getElementById(monitorShowPannelId).innerHTML = lingcloud.Monitor.errors.noRes;					return;				}				var str2 = '<div id="srvGraphItem"  ></div><div style=\"width:700px; height:auto;overflow:auto;\">';				str2 += '<table border="0" cellspacing=1 width="100%">' + '<tbody>';				// the header of the table				str2 += '<tr class="actionlog_title">' + '<th width="30px">'						+ lingcloud.Monitor.monitorDetail.tHost + '</th>'						+ '<th width="120px">'						+ lingcloud.Monitor.monitorDetail.tSrv + '</th>'						+ '<th width="30px">'						+ lingcloud.Monitor.monitorDetail.tStat + '</th>'						+ '<th width="150px">'						+ lingcloud.Monitor.monitorDetail.tCheck + '</th>'						+ '<th >' + lingcloud.Monitor.monitorDetail.tInfor						+ '</th>' + '</tr>';				var count = 0;				for ( var i = 0; i < len; i++) {					var monitorInfo = result.HostInfors;					var st = monitorInfo[i].srvState;					if (!isResStatus(st, seriesIndex))						continue;					if (i % 2 == 1) {						str2 += '<tr class= "vmi_tr_odd">';					} else {						str2 += '<tr class= "vmi_tr_even">';					}					str2 += '<td>' + monitorInfo[i].hostName + '</td>';					str2 += '<td align= "center" style = "cursor:pointer" onClick="showMonitorItemGraphList(\''							+ monitorInfo[i].hostName							+ '\', \''							+ monitorInfo[i].srvName							+ '\', \''							+ basePath							+ '\', 1)">'							+ '<img width="16" height="16" style="border: medium none ;" src="http://172.22.1.13:8080/lingcloud/images/list.png">&nbsp;&nbsp;'							+ getSrvName(monitorInfo[i].srvName)							+ '</td>';					str2 += statusCheck(st);					str2 += '<td align ="center">' + monitorInfo[i].srvCheckTime + '</td>';					str2 += '<td>' + monitorInfo[i].srvStatInfor + '</td>';					str2 += '</tr>';				}				str2 += '</tbody></table></div>';				jShow(str2, result.partitionName + ': ' + item);			} else {				alert(lingcloud.error.responseNotFound + ajax.statusText);			}		}	};	ajax.send(null);}/** * to define the callback of the mousemove event *  * @param {} *            ev * @param {} *            gridpos * @param {} *            datapos * @param {} *            neighbor * @param {} *            plot */function myMove(ev, gridpos, datapos, neighbor, plot) {	var targetid = plot['targetId'] + '';	var namearry = plot._msnamearray	// var partNum = parseInt(targetid[targetid.length -1]);	var $tooltipId = $('#monitor_statistics_tooltip_' + targetid[targetid.length - 1]);	if (neighbor == null) {		$tooltipId.fadeOut().empty();		// isShowing = false;	}	if (neighbor != null) {		if ($tooltipId.is(':hidden')) {			var d = new Date();			var seriesIndex = neighbor.seriesIndex, pointIndex = neighbor.pointIndex, data = neighbor.data;			var statusarr = [ lingcloud.Monitor.status.ok,					lingcloud.Monitor.status.warn,					lingcloud.Monitor.status.crit ];			// alert((data));			var num = data['1'], tips = '';			tips = num + lingcloud.Monitor.monitorSummary.tips14Move					+ statusarr[seriesIndex]					+ lingcloud.Monitor.monitorSummary.tips24Move					+ namearry[pointIndex] + '!';			// if(num ==1){			// tips = 'there is 1 machine with the ' + statusarr[seriesIndex] +			// ' ' + namearry[pointIndex] + '!';			// }else{			// tips = 'there are ' + num + ' machines with the ' +			// statusarr[seriesIndex] + ' ' + namearry[pointIndex] + '!';			// }			// var myText = "hello, world."//d.getSeconds(); // could be any			// function pulling data from anywhere.			$tooltipId.html(tips).css( {				left : gridpos.x,				top : gridpos.y			}).fadeIn();		}	}}/** * to configure the monitor items and refresh frequenry *  * @param {} *            basePath */function monitorManagementTab(basePath) {	$('#' + monitorTabPannelId).html(loadingStr);	$.ajax( {		url : basePath + "JSP/AjaxMonitorProxy.jsp",		type : 'GET',		dataType : 'text',		data : "proxy=showTab4Patition",		error : function(XMLHttpRequest, textStatus, errorThrown) {			alert(lingcloud.error.responseNotFound + textStatus);		},		success : function(data, textStatus, XMLHttpRequest) {			if (data == '') {				$('#' + monitorTabPannelId)						.html(lingcloud.Monitor.errors.noRes);				return;			}			try {				var result = eval('(' + data + ')');				var items = result.datas;				var itemNum = items.length, i = 0;				if (itemNum == 0) {					$('#' + monitorTabPannelId)							.html(lingcloud.Monitor.errors.noRes);					return;				}				var partion = new Array();				for (i = 0; i < itemNum; i++) {					partion[i] = {						name : items[i].PartionName,						handler : function(index) {							monitorManagementPage(basePath, index);							currentPartion = index;							// $('#tabpanel').html("can you see it ?" + this.name);					}					};				}				i = 0;				var t = new LingcloudTab( {					renderId : "lingcloudMonitorTabPanel",					basePath : '.',					width : "900px",					vertical : false,					hover : {						color : "#ff0",						backgroundColor : "#F3F1E6"					},					tabs : partion				});			}catch (e) {				alert(e);			}		}	});}/** * to configure the monitor items and refresh frequenry *  * @param {} *            basePath */function monitorManagementPage(basePath, parId) {	$('#' + monitorPagePannelId).html(loadingStr);	// alert('here');	$			.ajax( {				url : basePath + "JSP/AjaxMonitorProxy.jsp",				type : 'GET',				dataType : 'text',				data : "proxy=getMonitorSet&parId=" + parId,				error : function(MLHttpRequest, textStatus, errorThrown) {					alert(lingcloud.error.responseNotFound + textStatus);				},				success : function(data, textStatus, XMLHttpRequest) {					if (data == '') {						$('#' + monitorPagePannelId).html(								lingcloud.Monitor.errors.noRes);						return;					}					var result = eval('(' + data + ')');					// get the data and generate a form for the monitor, you can					// view and submit					var str = "<form id=\"monitorMgntForm\" " 							//+ " action=\""							//+ basePath							//+ "JSP/userProxy.jsp?proxyNum=1\" "							+ "method=\"get\">"; 					var items = result.itemList;					var itemNum = items.length, selectedItemNum = 0;					if (itemNum > 0) {						var nt = null;						var itemsInRow = 5;						var index = 0;						var currentRow = new Array(0, 0, 0, 0, 0, 0);						var mystr = new Array("", "", "", "", "", "");						mystr[1] += '<fieldset><legend>' + lingcloud.Monitor.monitorMgt.perf + '</legend><table id="table1"><tr> ';						mystr[2] += '<fieldset><legend>' + lingcloud.Monitor.monitorMgt.process + '</legend><table id="table2"><tr> ';						mystr[3] += '<fieldset><legend>' + lingcloud.Monitor.monitorMgt.network + '</legend><table id="table3"><tr> ';						mystr[4] += '<fieldset><legend>' + lingcloud.Monitor.monitorMgt.app + '</legend><table id="table4"><tr> ';						mystr[5] += '<fieldset><legend>' + lingcloud.Monitor.monitorMgt.user + '</legend><table id="table5"><tr> ';						while (index < itemNum) {							nt = items[index];							nt.CtgID += 1;							var temp = "";							if (nt.checked == 1) {								temp = "checked=\"checked\"";							}							mystr[nt.CtgID] += "<td><input type = \"checkbox\" name = \"allmonitoritems\" value= \""									+ nt.itemName									+ "\" "									+ temp									+ " >"									+ getSrvName(nt.itemName)									+ "&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp&nbsp"									+ "</input></td>";							currentRow[nt.CtgID]++;							if (currentRow[nt.CtgID] == itemsInRow) {								mystr[nt.CtgID] += "</tr><tr>";								currentRow[nt.CtgID] = 0;							}							index++;						}						mystr[1] += "</tr></table></fieldset>";						mystr[2] += "</tr></table></fieldset>";						mystr[3] += "</tr></table></fieldset>";						mystr[4] += "</tr></table></fieldset>";						mystr[5] += "</tr></table></fieldset>";						str += mystr[1] + "<br/>" + mystr[2] + "<br/>"								+ mystr[3] + "<br/>" + mystr[4] + "<br/>"								+ mystr[5] + "<br/>";						str += '<input type="checkbox" id="CheckedAll" />'								+ lingcloud.Monitor.monitorMgt.select								+ '<br/><br/>';						str += "<b>"								+ lingcloud.Monitor.monitorMgt.interval								+ "&nbsp;&nbsp;</b><input type=\"text\" name=\"monitorRefreshInterval\" value=\""								+ result.flushHz								+ "\"/>&nbsp&nbsp&nbsp<b>" 								+ lingcloud.Monitor.monitorMgt.timeUnit								+ "</b><br/><br/>";						str += "<b>"								+ lingcloud.Monitor.monitorMgt.item								+ "&nbsp;&nbsp;</b><input type=\"text\" name=\"monitorShowPage\" value=\""								+ result.recordPerPage + "\"/><br/><br/>";						str += '<input type="button" value="'								+ lingcloud.Monitor.monitorMgt.btnSave								+ '" onclick="callback4MonitorMgnt(\''								+ basePath + '\');"></input>';					} else {						str += 'no data.';					}					str += "</form>";					$('#' + monitorPagePannelId).html(str);					$(function() {						if (selectedItemNum == itemNum)							$('#CheckedAll').attr('checked', true);						$("#CheckedAll").click(								function() {									$('[name=allmonitoritems]:checkbox').attr(											"checked", this.checked);								});						$('[name=allmonitoritems]:checkbox')								.click(										function() {											var $tmp = $('[name=allmonitoritems]:checkbox');											$('#CheckedAll')													.attr(															'checked',															$tmp.length == $tmp																	.filter(':checked').length);										});						$("#CheckedRev")								.click(										function() {											$('[name=allmonitoritems]:checkbox')													.each(															function() {																this.checked = !this.checked;																var $tmp = $('[name=allmonitoritems]:checkbox');																$('#CheckedAll')																		.attr(																				'checked',																				$tmp.length == $tmp																						.filter(':checked').length);															});										});					});				}			});}function callback4MonitorMgnt(basePath) {	var form = document.getElementById("monitorMgntForm");	var interval = form.monitorRefreshInterval.value.trim();	var page = form.monitorShowPage.value.trim();	var su = interval + ";" + page;	var isNum = /^[1-9]\d*$/;	if (interval == null || interval == "" || !isNum.test(interval)) {		alert(lingcloud.Monitor.errors.refreshIntervalNotValid);		return;	}	if (page == null || page == "" || !isNum.test(page)) {		alert(lingcloud.Monitor.errors.rppNotValid);		return;	}	for ( var i = 0; i < form.allmonitoritems.length; i++) {		if (form.allmonitoritems[i].checked) {			su += ";";			su += form.allmonitoritems[i].value;		}	}	$.ajax( {		url : basePath + "JSP/AjaxMonitorProxy.jsp",		type : 'GET',		dataType : 'text',		data : "proxy=setMonitorConf&monitorconf=" + su + "&parId="				+ currentPartion,		error : function(MLHttpRequest, textStatus, errorThrown) {			jShow('<b>' + lingcloud.Monitor.monitorMgt.subFail + '</b>',					lingcloud.error.tip);			// $('#' + monitorShowPannelId).html("Something wrong happened when			// save settings.");		},		success : function(data, textStatus, XMLHttpRequest) {			var result = data.trim();			if (result == 'OK') {				jShow('<b>' + lingcloud.Monitor.monitorMgt.subSucc + '</b>',						lingcloud.error.tip);			} else {				jShow('<b>' + lingcloud.Monitor.monitorMgt.subFail + '</b>',						lingcloud.error.tip);			}		}	});}/** * do some thing when unload the page */function unload() {	clearInterval(monitorRefreshment);}function c2u(value) {	var c = value.trim();	var str = escape(c).replace(/%/g, '\\');	return str;}